/*
*	@file:funciones.c	
*	@brief: Contiene las funciones para diagCovid.c
*	@author: Clase de Guillermo Gómez
*	@date: 29/01/2021
*/

#include "defCovid.h"

/*
*	@brief: Función que captura las entradas de uno o varios pacientes
*	@author: Clase Guillermo Gómez Abascal
*	@param Pacientes p: lista de varios pacientes
*	@param int num: Número de pacientes que van a entrar datos
*	@return
*/
extern int capturar(Paciente p[], int num){
	int i;
	
	for (i = 0; i < num; i++){
		printf("\nCaptura del Paciente %d\n", i + 1);
		printf("Ingresar Nombre y Apellido: ");
		scanf(" %[^\n]", p[i].nombre);
		printf("Ingresar Día Mes Año de Nacimiento: ");
		scanf(" %d %d %d", &p[i].fecha_nacimiento.dia, &p[i].fecha_nacimiento.mes, &p[i].fecha_nacimiento.anio);	
		printf("Ingresar Sexo (M/F): ");
		scanf(" %c", &p[i].sexo);
		printf("Ingresar Peso en Kg: ");
		scanf(" %f", &p[i].peso);
		printf("Ingresar Estatura en Metros: ");
		scanf(" %f", &p[i].estatura);
		printf("Ingresar 1 si tiene el padecimiento o 0 si no\n");
		printf("Obesidad: ");
		scanf(" %d", &p[i].padecimientos[0]);
		printf("Diabetes: ");
		scanf(" %d", &p[i].padecimientos[1]);
		printf("Hipertensión: ");
		scanf(" %d", &p[i].padecimientos[2]);
		
	}

	return True;
}

/*
*	@brief: Función que calcula la edad de un paciente dado su expediente, regresa
*			su edad.
*	@author: Diego Rosenberg
*	@param Paciente *p: Expediente del paciente
*	@return int
*/
extern int edadPaciente(Paciente *p){
	time_t t = time(NULL);
	struct tm tm = *localtime(&t);
	int edad = (int)tm.tm_year + 1900 - (p -> fecha_nacimiento.anio);

	if (p -> fecha_nacimiento.mes < (tm.tm_mon + 1)){
		edad--;
	}
	
	else if (p -> fecha_nacimiento.mes == (tm.tm_mon + 1)){
		if (p -> fecha_nacimiento.dia < tm.tm_mday){
			edad--;
		}
	}
	
	return edad;
}

/*
*	@brief: Función que imprime la edad de varios pacientes
*	@author: Clase Guillermo Gómez Abascal
*	@param Pacientes *p: puntero a un paciente
*	@return
*/
extern int imprimir(Paciente *p){	
	printf("\nPaciente:\n");
	printf("Nombre y Apellido: %s\n", p -> nombre);
	printf("Fecha de Nacimiento: %d/%d/%d\n", p -> fecha_nacimiento.dia, p -> fecha_nacimiento.mes, p -> fecha_nacimiento.anio);
	printf("Sexo (M/F): %c\n", p -> sexo);
	printf("Peso: %f kg\n", p -> peso);
	printf("Estatura: %f m\n", p -> estatura);
	printf("Padecimientos del paciente (S si tiene el padecimiento o N si no):\n");
	printf("\tObesidad: [%c]\n", p -> padecimientos[0] ? 'S':'N');
	printf("\tDiabetes: [%c]\n", p -> padecimientos[1] ? 'S':'N');
	printf("\tHipertensión: [%c]\n", p -> padecimientos[2] ? 'S':'N');

	return 1;
}


/*
*	@brief: Función que imprime a un file la edad de varios pacientes
*	@author: Clase Guillermo Gómez Abascal
*	@param Pacientes *p: puntero a un paciente
*	@return
*/
extern int guardarArchTxt(Paciente *p){
	FILE *fp;

	fp = fopen("pacientes.txt", "a");
	if (fp == NULL){
		printf("\nFile no se puede abrir\n");
		return 0;
	}
	fprintf(fp, "%s\n", p -> nombre);
	fprintf(fp, "%d/%d/%d\n", p -> fecha_nacimiento.dia, p -> fecha_nacimiento.mes, p -> fecha_nacimiento.anio);
	fprintf(fp, "%c\n", p -> sexo);
	fprintf(fp, "%f\n", p -> peso);
	fprintf(fp, "%f\n", p -> estatura);
	fprintf(fp, "%d\t%d\t%d\n", p -> padecimientos[0], p -> padecimientos[1], p -> padecimientos[2]);
	fprintf(fp, "%c", '\n');
	
	fclose(fp);
	return 1;
}

/*
*	@brief: Función que resetea pacientes.txt
*	@author: Clase Guillermo Gómez Abascal
*	@return int
*/
extern int resetArchTxt(){
	if (remove("pacientes.txt") == 0)
		return 1;
	
	printf("\nFile no se pudo borrar.\n");
	return 0;
}

extern int lineas(char *file_name){
	int count = 0;
	char c;
	FILE *fp;
	fp = fopen(file_name, "r");
	if (fp == NULL)
		return 0;
	
	for(c = getc(fp); c != EOF; c = getc(fp)){
		if (c == '\n'){
			count++;
		}
	}
	fclose(fp);
	return count;
}


/*
*	@brief: Función que lee file txt
*	@author: Clase Guillermo Gómez Abascal
*	@param Pacientes p: lista de varios pacientes
*	@param int num: Número de pacientes que van a entrar datos
*	@return
*/
extern int leerArchTxt(Paciente *p){
	FILE *fp;
	fp = fopen("pacientes.txt", "r");

	char linea[80];
	int block_number = 0;
	int i = 0;
	while(fgets(linea, 80, fp)){
		if (block_number == 0){
			int len = strlen(linea);
			for(int j = 0; j < len; j++){
				if(linea[j] == '\n'){
					p[i].nombre[j] == '\0';
					break;
				}
				else
					p[i].nombre[j] = linea[j];
			}
			printf("len: %li", strlen(p[i].nombre));
			block_number++;
			printf("\n");
		}
		else if(block_number == 1){
			sscanf(linea, "%d/%d/%d", &p[i].fecha_nacimiento.dia, &p[i].fecha_nacimiento.mes, &p[i].fecha_nacimiento.anio);
			block_number++;
		}

		else if(block_number == 2){
			sscanf(linea, "%c", &p[i].sexo);
			block_number++;
		}
		else if(block_number == 3){
			sscanf(linea, "%f", &p[i].peso);
			block_number++;
		}
		else if(block_number == 4){
			sscanf(linea, "%f", &p[i].estatura);
			block_number++;
		}
		else if(block_number == 5){
			sscanf(linea, "%d\t%d\t%d", &p[i].padecimientos[0], &p[i].padecimientos[1], &p[i].padecimientos[2]);
			block_number++;
		}
		else{
			i++;
			block_number = 0;
		}
		
	}
	
	return 1;
}
